# -*- coding: utf-8 -*-
"""prediction_rpt

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bMYB5YzAHEjh_kT2Ld6L68roK6DLVtzy
"""

!pip install groq langchain langchain-core langchain-groq chromadb pypdf gradio sentence-transformers

from google.colab import drive
drive.mount('/content/drive')

!pip install langchain-community # Make sure to install the correct package name.

from langchain_groq import ChatGroq
from langchain_community.document_loaders import TextLoader, PyPDFDirectoryLoader
from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain_community.vectorstores import Chroma
from langchain_core.prompts import ChatPromptTemplate
from google.colab import userdata
import os
import time
import textwrap
import gradio as gr

loader = PyPDFDirectoryLoader("/content/drive/MyDrive/rpt_ref")
text = loader.load()

text_splitter = RecursiveCharacterTextSplitter(chunk_size=1000, chunk_overlap=200)
chunks = text_splitter.split_documents(text)

from transformers import AutoModel
from langchain.embeddings import HuggingFaceEmbeddings

model_name = "sentence-transformers/all-mpnet-base-v2"
model_kwargs = {"device": "cpu"}

embeddings_hf = HuggingFaceEmbeddings(model_name=model_name, model_kwargs=model_kwargs)

vectorstore = Chroma.from_documents(
    documents = chunks,
    collection_name= "groq_embeds",
    embedding = embeddings_hf,
)

retriever = vectorstore.as_retriever()

if vectorstore:
    print("Vector store has been created.")
else:
    print("Vector store has not been created. Please check your code.")

vectorstore.get()

from google.colab import userdata
import os
from langchain_groq import ChatGroq

os.environ["GROQ_API_KEY"] = userdata.get('groq_api_key')
llm = ChatGroq(temperature=0, model_name = "mixtral-8x7b-32768" )

from langchain.chains import RetrievalQA
from langchain.prompts import ChatPromptTemplate

rag_template = """
Given a set of desired material properties such as hardness, tensile strength (TS), and elongation at break (EB), suggest an optimized EPDM formulation.
The formulation should include components like EPDM ethylene and propylene content, diene type, co-agents, fillers, and other additives.
Ensure that the suggested formulation aligns with past data trends to achieve the target mechanical properties.

Act as an expert in this field and give the most accurate values. Don't eloborate alot. Give me the values and what the compound is alone
User Query: {question}

Relevant Data:
{context}
"""

# Create prompt
rag_prompt = ChatPromptTemplate.from_template(rag_template)

# Fix RetrievalQA call
qa_chain = RetrievalQA.from_chain_type(
    llm,
    retriever=vectorstore.as_retriever(),
    chain_type_kwargs={"prompt": rag_prompt, "document_variable_name": "context"}
)

def process_question(user_question):
  response = qa_chain.invoke(user_question)
  full_response = response['result']
  return full_response

interface = gr.Interface(fn=process_question,
                         inputs=gr.Textbox(lines=2, placeholder="Type your values here"),
                         outputs=[gr.Textbox(lines=10)], theme="soft",
                         title="Chatbot",
                         description="Ask any question",
                         allow_flagging="never")

interface.launch()

